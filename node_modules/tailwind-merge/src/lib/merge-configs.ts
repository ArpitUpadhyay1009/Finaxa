<<<<<<< HEAD
import { AnyConfig, ConfigExtension } from './types'
=======
import { AnyConfig, ConfigExtension, NoInfer } from './types'
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d

/**
 * @param baseConfig Config where other config will be merged into. This object will be mutated.
 * @param configExtension Partial config to merge into the `baseConfig`.
 */
export const mergeConfigs = <ClassGroupIds extends string, ThemeGroupIds extends string = never>(
    baseConfig: AnyConfig,
    {
        cacheSize,
        prefix,
<<<<<<< HEAD
        separator,
=======
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
        experimentalParseClassName,
        extend = {},
        override = {},
    }: ConfigExtension<ClassGroupIds, ThemeGroupIds>,
) => {
    overrideProperty(baseConfig, 'cacheSize', cacheSize)
    overrideProperty(baseConfig, 'prefix', prefix)
<<<<<<< HEAD
    overrideProperty(baseConfig, 'separator', separator)
    overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName)

    for (const configKey in override) {
        overrideConfigProperties(
            baseConfig[configKey as keyof typeof override],
            override[configKey as keyof typeof override],
        )
    }

    for (const key in extend) {
        mergeConfigProperties(
            baseConfig[key as keyof typeof extend],
            extend[key as keyof typeof extend],
        )
    }
=======
    overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName)

    overrideConfigProperties(baseConfig.theme, override.theme)
    overrideConfigProperties(baseConfig.classGroups, override.classGroups)
    overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups)
    overrideConfigProperties(
        baseConfig.conflictingClassGroupModifiers,
        override.conflictingClassGroupModifiers,
    )
    overrideProperty(baseConfig, 'orderSensitiveModifiers', override.orderSensitiveModifiers)

    mergeConfigProperties(baseConfig.theme, extend.theme)
    mergeConfigProperties(baseConfig.classGroups, extend.classGroups)
    mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups)
    mergeConfigProperties(
        baseConfig.conflictingClassGroupModifiers,
        extend.conflictingClassGroupModifiers,
    )
    mergeArrayProperties(baseConfig, extend, 'orderSensitiveModifiers')
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d

    return baseConfig
}

const overrideProperty = <T extends object, K extends keyof T>(
    baseObject: T,
    overrideKey: K,
    overrideValue: T[K] | undefined,
) => {
    if (overrideValue !== undefined) {
        baseObject[overrideKey] = overrideValue
    }
}

const overrideConfigProperties = (
    baseObject: Partial<Record<string, readonly unknown[]>>,
    overrideObject: Partial<Record<string, readonly unknown[]>> | undefined,
) => {
    if (overrideObject) {
        for (const key in overrideObject) {
            overrideProperty(baseObject, key, overrideObject[key])
        }
    }
}

const mergeConfigProperties = (
    baseObject: Partial<Record<string, readonly unknown[]>>,
    mergeObject: Partial<Record<string, readonly unknown[]>> | undefined,
) => {
    if (mergeObject) {
        for (const key in mergeObject) {
<<<<<<< HEAD
            const mergeValue = mergeObject[key]

            if (mergeValue !== undefined) {
                baseObject[key] = (baseObject[key] || []).concat(mergeValue)
            }
        }
    }
}
=======
            mergeArrayProperties(baseObject, mergeObject, key)
        }
    }
}

const mergeArrayProperties = <Key extends string>(
    baseObject: Partial<Record<NoInfer<Key>, readonly unknown[]>>,
    mergeObject: Partial<Record<NoInfer<Key>, readonly unknown[]>>,
    key: Key,
) => {
    const mergeValue = mergeObject[key]

    if (mergeValue !== undefined) {
        baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue
    }
}
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
