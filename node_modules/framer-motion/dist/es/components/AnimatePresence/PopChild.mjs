<<<<<<< HEAD
import * as React from 'react';
import { useId, useRef, useInsertionEffect } from 'react';
=======
"use client";
import { jsx } from 'react/jsx-runtime';
import { isHTMLElement } from 'motion-dom';
import * as React from 'react';
import { useId, useRef, useContext, useInsertionEffect } from 'react';
import { MotionConfigContext } from '../../context/MotionConfigContext.mjs';
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d

/**
 * Measurement functionality has to be within a separate component
 * to leverage snapshot lifecycle.
 */
class PopChildMeasure extends React.Component {
    getSnapshotBeforeUpdate(prevProps) {
        const element = this.props.childRef.current;
        if (element && prevProps.isPresent && !this.props.isPresent) {
<<<<<<< HEAD
=======
            const parent = element.offsetParent;
            const parentWidth = isHTMLElement(parent)
                ? parent.offsetWidth || 0
                : 0;
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
            const size = this.props.sizeRef.current;
            size.height = element.offsetHeight || 0;
            size.width = element.offsetWidth || 0;
            size.top = element.offsetTop;
            size.left = element.offsetLeft;
<<<<<<< HEAD
=======
            size.right = parentWidth - size.width - size.left;
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
        }
        return null;
    }
    /**
     * Required with getSnapshotBeforeUpdate to stop React complaining.
     */
    componentDidUpdate() { }
    render() {
        return this.props.children;
    }
}
<<<<<<< HEAD
function PopChild({ children, isPresent }) {
=======
function PopChild({ children, isPresent, anchorX, root }) {
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
    const id = useId();
    const ref = useRef(null);
    const size = useRef({
        width: 0,
        height: 0,
        top: 0,
        left: 0,
<<<<<<< HEAD
    });
=======
        right: 0,
    });
    const { nonce } = useContext(MotionConfigContext);
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
    /**
     * We create and inject a style block so we can apply this explicit
     * sizing in a non-destructive manner by just deleting the style block.
     *
     * We can't apply size via render as the measurement happens
     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the
     * styles directly on the DOM node, we might be overwriting
     * styles set via the style prop.
     */
    useInsertionEffect(() => {
<<<<<<< HEAD
        const { width, height, top, left } = size.current;
        if (isPresent || !ref.current || !width || !height)
            return;
        ref.current.dataset.motionPopId = id;
        const style = document.createElement("style");
        document.head.appendChild(style);
=======
        const { width, height, top, left, right } = size.current;
        if (isPresent || !ref.current || !width || !height)
            return;
        const x = anchorX === "left" ? `left: ${left}` : `right: ${right}`;
        ref.current.dataset.motionPopId = id;
        const style = document.createElement("style");
        if (nonce)
            style.nonce = nonce;
        const parent = root ?? document.head;
        parent.appendChild(style);
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
        if (style.sheet) {
            style.sheet.insertRule(`
          [data-motion-pop-id="${id}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
<<<<<<< HEAD
            top: ${top}px !important;
            left: ${left}px !important;
=======
            ${x}px !important;
            top: ${top}px !important;
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
          }
        `);
        }
        return () => {
<<<<<<< HEAD
            document.head.removeChild(style);
        };
    }, [isPresent]);
    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));
=======
            if (parent.contains(style)) {
                parent.removeChild(style);
            }
        };
    }, [isPresent]);
    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));
>>>>>>> 3c08b929f5a458570a719f4b5eccee16e2fc4c1d
}

export { PopChild };
